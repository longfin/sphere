import { expect, test } from "vitest";
import { deriveAddress, signTransaction } from "@planetarium/sign";
import { createAccount } from "..";

if (globalThis.crypto == null) {
  // FIXME: This is a workaround for the lack of Web Crypto API in Vitest.
  // @ts-ignore
  globalThis.crypto = require("node:crypto").webcrypto;
}

test("address matches", async () => {
  const samples: [string, string][] = [
    [
      "618f81d6a60563b30a1c06c64a7f026f8b4c5c39f2749ee7838514be848df4ed",
      "0x0B0cAAFD115A2eE9995C2De321c1E8633F28F9c9",
    ],
    [
      "92f24452a9e468579327fd87863f492fb1175000894b6d9808a0c0169bb34576",
      "0x66109E2f4Bf8625E436c48990a7d06c6e12B4126",
    ],
    [
      "3c3830844f12da367a6db5f85ee5e721ddcc5a69d0a0d0c3cb7a8a4fe7a8b7fd",
      "0x0972497180823b0D39734943CE7e2c1cB19281A7",
    ],
  ];
  for (const [privateKey, address] of samples) {
    expect(await deriveAddress(createAccount(privateKey))).eq(address);
  }
});

test("signed transaction matches", async () => {
  const privateKey =
    "ffab1d7ae8381a6a3cbdb19a4c10356c07e6d56c84c107191a4ae4e4402f4637";
  const account = createAccount(privateKey);
  const tx =
    "64313a616c6475373a747970655f696475363a7374616b653275363a76616c7565736475323a616d69316575323a696431363ad4e5b86e9ab2564e8c91bc29b9142a7b656565313a6733323a4582250d0da33b06779a8475d283d5dd210c683b9b999d74d03fac4f58fa6bce313a6e693065313a7036353a04dc7c4c265c176d45e29aa99c95687d25067069cd782021a543e574f3c4869c9b2dcead228aa2f0fbd9108c6deaae02982cf29a2040bd8a9859601d863c2e8be1313a7332303a8f9ae9d0c1559c09809edfa94add154693933185313a747532373a323032322d31302d31315430373a31323a30362e3636393439315a313a756c32303a684560381e0ee53074dff57ff31f2f1c07a082ab32303a8f9ae9d0c1559c09809edfa94add1546939331856565";
  const signedTx =
    "64313a5337303a304402202222522d382bc276706eead08138db3686e4f53dc3de7f49696f63233f3a54c5022015f009eb731bcd57a908bbe06fded19d718824ffe179341b016ea1c46102abaf313a616c6475373a747970655f696475363a7374616b653275363a76616c7565736475323a616d69316575323a696431363ad4e5b86e9ab2564e8c91bc29b9142a7b656565313a6733323a4582250d0da33b06779a8475d283d5dd210c683b9b999d74d03fac4f58fa6bce313a6e693065313a7036353a04dc7c4c265c176d45e29aa99c95687d25067069cd782021a543e574f3c4869c9b2dcead228aa2f0fbd9108c6deaae02982cf29a2040bd8a9859601d863c2e8be1313a7332303a8f9ae9d0c1559c09809edfa94add154693933185313a747532373a323032322d31302d31315430373a31323a30362e3636393439315a313a756c32303a684560381e0ee53074dff57ff31f2f1c07a082ab32303a8f9ae9d0c1559c09809edfa94add1546939331856565";

  expect(await signTransaction(tx, account)).toEqual(signedTx);
});
